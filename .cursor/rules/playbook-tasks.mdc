---
description:
globs:
alwaysApply: false
---
# Playbook: How to Generate Tasks for a Designer-Led Prototype

This document outlines the standard process for turning a Product Requirements Document (PRD) into a concrete, actionable task list for a non-technical designer building a high-fidelity prototype.

## Philosophy: Design-First, UI-Up

The goal of this task list is to facilitate speed and realism in prototyping, not to build production-ready software. The approach is strictly "Design-First," meaning we focus entirely on what the user **sees** and **interacts with**.

Key Principles:
- **No Backend, No APIs:** All data is mocked and lives in the front-end code. There should be zero mention of databases, APIs, or server logic. This ensures the prototype is fast to build and unbreakable.
- **Modularity and Reusability:** We build from the smallest pieces ("Lego bricks") upwards into full pages. This mirrors modern UI development and creates a reusable component library.
- **Incremental and Logical Order:** Tasks are structured in a logical sequence so that each step builds upon the last.
- **Clarity and Precision:** Every task and sub-task is numbered and presented as a checkbox for easy tracking and reference.

---

## The Four Phases of Task Generation

Every task list should be broken down into these four sequential phases.

### Phase 1: Project Setup & Foundation
**Goal:** Prepare the canvas. This is the one-time setup required to ensure a smooth and consistent development process.
- **Typical Tasks:**
    - Installing necessary UI/icon libraries.
    - Creating a `theme.ts` file to define shared styles (colors, fonts, spacing).
    - Creating a `mock-data.ts` file to hold all fake data for the prototype.
    - Defining the TypeScript `types` for the mock data to ensure consistency.

### Phase 2: Build the Component Library (The "Lego Bricks")
**Goal:** Create each small, individual piece of the UI as a separate, isolated, and reusable component. These are the building blocks of the application. They should be "dumb" and only concerned with displaying data they are given.
- **Typical Tasks:**
    - `StatusBadge.tsx` (e.g., for "Active" or "Retired").
    - `DataPill.tsx` (e.g., for `Region: NAMER`).
    - `SearchBar.tsx` (the visual input field).
    - `ProductListItem.tsx` (a single row in a list).
    - `Button.tsx` (a standardized button).

### Phase 3: Assemble the Pages (The "Lego Castles")
**Goal:** Take the components from Phase 2 and assemble them into full page layouts. These pages will be static at first, simply displaying the composed components and mock data.
- **Typical Tasks:**
    - `HomePage.tsx` (importing and arranging the search bar and product list components).
    - `ProductDetailPage.tsx` (arranging components to show details for one item).
    - `Layout.tsx` (creating a consistent shell with a header/sidebar around the pages).

### Phase 4: Add Interactivity (Making it "Clickable")
**Goal:** Breathe life into the static pages. This is the final step where we make the prototype respond to user input, using front-end state management.
- **Typical Tasks:**
    - Implementing the search/filter logic on the Home Page.
    - Implementing navigation (e.g., clicking an item in a list takes you to its detail page).
    - Making tabs or dropdown menus functional.

## Numbering and Formatting
All tasks must be formatted as a nested, numbered list with checkboxes to allow for clear tracking and communication.

**Example Structure:**
`1.0: Phase 1 - Project Setup
   1.1 [ ] Create the mock data file.
      1.1.1 [ ] Define the data structure (type) for a Product.
      1.1.2 [ ] Add 5 fake Products to the mock data array.

2.0: Phase 2 - Build the Component Library
   2.1 [ ] Create the StatusBadge component.
      2.1.1 [ ] It should accept a "status" prop (`active`, `retired`).
      2.1.2 [ ] It should display with a green color for `active`...`
