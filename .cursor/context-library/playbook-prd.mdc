---
description: 
globs: 
alwaysApply: false
---
# Playbook: How to Create a Product Requirements Document (PRD)

This document outlines the standard process and structure for creating PRDs for the Product Configuration Center (PCC) project. It is designed to ensure clarity, consistency, and actionability for every epic we undertake.

## Philosophy

The goal of a PRD is to be a "contract" for each epic. It must be so clear that an engineer, a designer, or a business stakeholder can read it and know exactly **what** we are building, **why** we are building it, and **how to measure success**. The PRD focuses on the *user problems* and *business goals*, not the technical implementation.

Every PRD must be directly translatable into a checklist of concrete, chunkable tasks for design and development.

## PRD Structure

Each PRD should contain the following sections in order.

### 1. Background & Problem Statement
- **Purpose:** A brief, compelling narrative explaining the "why." What pain point is this specific epic solving? Why is it important *now*?
- **Source:** This section should align with the project's high-level `@vision-and-goals.mdc` to ensure our story is consistent.

### 2. Goals & Success Metrics
- **Purpose:** A small, specific, and measurable set of goals for *this epic only*.
- **Function:** This defines what "done" and "successful" look like. It keeps the team focused on the outcome, not just the output. Metrics should be quantifiable where possible (e.g., "Reduce ad-hoc data requests by 50%").

### 3. User Personas
- **Purpose:** A quick summary of the target users for this epic (e.g., Priya the PM, Anand the Pricing Manager).
- **Function:** Ensures we are building with empathy and that every requirement is tied to a real user's need.

### 4. User Stories & Acceptance Criteria
- **Purpose:** This is the core of the PRD and the primary driver for task generation.
- **Structure:**
    - **User Story:** Write stories in the format: "As a [persona], I want to [action], so that I can [achieve a goal]."
    - **Acceptance Criteria (AC):** For each story, create a bulleted list of clear, testable conditions that must be met for the story to be considered complete. Each AC should be a simple statement.
- **Function:** Each Acceptance Criterion should be small enough to be converted directly into a development or design task. This makes the work perfectly chunkable.

### 5. Scope and Data Requirements
- **Purpose:** Clearly define what is **In Scope** and **Out of Scope** for this epic to prevent scope creep.
- **Data Requirements:** Include a definitive table of all data fields and attributes that must be handled or displayed in the UI. This gives the development team a precise checklist of data points to account for.

### 6. Open Questions & Design Considerations
- **Purpose:** A section to explicitly call out any unresolved design or product questions.
- **Example:** "What is the most intuitive way for a user to filter a long list of SKUs?" or "How do we visually distinguish between 'Active' and 'Retired' entities?"
- **Function:** This creates a clear agenda for design and product discussions. It ensures we address ambiguities before development begins.
